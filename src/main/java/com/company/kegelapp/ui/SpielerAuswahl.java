
package com.company.kegelapp.ui;

import java.time.LocalDate;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import com.company.kegelapp.dal.SpielerDAO;
import com.company.kegelapp.dal.SpieltagDAO;
import com.company.kegelapp.dal.StrafeDAO;
import com.company.kegelapp.domain.Spieler;
import com.company.kegelapp.domain.Spieltag;
import com.company.kegelapp.domain.Strafe;
import com.rapidclipse.framework.server.ui.ItemLabelGeneratorFactory;
import com.vaadin.flow.component.AbstractField.ComponentValueChangeEvent;
import com.vaadin.flow.component.ClickEvent;
import com.vaadin.flow.component.ComponentEvent;
import com.vaadin.flow.component.ComponentEventListener;
import com.vaadin.flow.component.HasValue;
import com.vaadin.flow.component.UI;
import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.checkbox.CheckboxGroup;
import com.vaadin.flow.component.dependency.HtmlImport;
import com.vaadin.flow.component.html.Label;
import com.vaadin.flow.component.orderedlayout.FlexComponent;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.router.Route;


@Route("spielerauswahl")
@HtmlImport("frontend://styles/shared-styles.html")
public class SpielerAuswahl extends VerticalLayout
{
	public SpielerAuswahl()
	{
		super();
		this.initUI();
		final Collection<Spieler> spieler = SpielerDAO.findAll();
		this.checkboxGroup.setItems(spieler);
		for(final Spieler spielerOne : spieler)
		{
			if(spielerOne.getActive())
			{
				this.checkboxGroup.select(spielerOne);
			}
		}
		
	}
	
	/**
	 * Event handler delegate method for the {@link CheckboxGroup} {@link #checkboxGroup}.
	 *
	 * @see HasValue.ValueChangeListener#valueChanged(HasValue.ValueChangeEvent)
	 * @eventHandlerDelegate Do NOT delete, used by UI designer!
	 */
	private void checkboxGroup_valueChanged(final ComponentValueChangeEvent<CheckboxGroup<Spieler>, Set<Spieler>> event)
	{
		System.out.println("HIER KLAPPTS");
	}

	/**
	 * Event handler delegate method for the {@link Button} {@link #button}.
	 *
	 * @see ComponentEventListener#onComponentEvent(ComponentEvent)
	 * @eventHandlerDelegate Do NOT delete, used by UI designer!
	 */
	private void button_onClick(final ClickEvent<Button> event)
	{
		final Set<Spieler>                       spieler           = this.checkboxGroup.getSelectedItems();
		final Map<Spieler, Map<Strafe, Integer>> spielerStrafenMap = new HashMap<>();
		Map<Strafe, Integer>                     strafenMap        = null;
		final Collection<Strafe>                 strafen           = StrafeDAO.findAll();
		for(final Spieler spielerOne : spieler)
		{
			strafenMap = new HashMap<>();
			for(final Strafe strafe : strafen)
			{
				strafenMap.put(strafe, 0);
			}
			spielerStrafenMap.put(spielerOne, strafenMap);
		}
		
		System.out.println(strafenMap);
		
		System.out.println(spielerStrafenMap);
		SpieltagDAO.insert(new Spieltag(LocalDate.now(), spielerStrafenMap));
		UI.getCurrent().navigate(SpieltagView.class);
	}
	
	/* WARNING: Do NOT edit!<br>The content of this method is always regenerated by the UI designer. */
	// <generated-code name="initUI">
	private void initUI()
	{
		this.label         = new Label();
		this.checkboxGroup = new CheckboxGroup<>();
		this.button        = new Button();

		this.setSpacing(false);
		this.setAlignItems(FlexComponent.Alignment.START);
		this.getStyle().set("overflow-x", "hidden");
		this.getStyle().set("overflow-y", "auto");
		this.label.setText("Spieler Ausw√§hlen");
		this.checkboxGroup.setItemLabelGenerator(ItemLabelGeneratorFactory.NonNull(Spieler::getName));
		this.checkboxGroup.addThemeName("vertical");
		this.button.setText("Spieltag Starten");

		this.label.setSizeUndefined();
		this.checkboxGroup.setSizeUndefined();
		this.button.setSizeUndefined();
		this.add(this.label, this.checkboxGroup, this.button);
		this.setHorizontalComponentAlignment(FlexComponent.Alignment.CENTER, this.label);
		this.setHorizontalComponentAlignment(FlexComponent.Alignment.CENTER, this.checkboxGroup);
		this.setHorizontalComponentAlignment(FlexComponent.Alignment.CENTER, this.button);
		this.setSizeFull();

		this.checkboxGroup.addValueChangeListener(this::checkboxGroup_valueChanged);
		this.button.addClickListener(this::button_onClick);
	} // </generated-code>
	
	// <generated-code name="variables">
	private Button                 button;
	private CheckboxGroup<Spieler> checkboxGroup;
	private Label                  label;
	// </generated-code>

}
