
package com.company.kegelapp.ui;

import java.time.LocalDate;

import com.company.kegelapp.dal.SpieltagDAO;
import com.company.kegelapp.domain.Spieltag;
import com.flowingcode.vaadin.addons.ironicons.AvIcons;
import com.flowingcode.vaadin.addons.ironicons.EditorIcons;
import com.flowingcode.vaadin.addons.ironicons.SocialIcons;
import com.vaadin.flow.component.ClickEvent;
import com.vaadin.flow.component.ComponentEvent;
import com.vaadin.flow.component.ComponentEventListener;
import com.vaadin.flow.component.UI;
import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.dependency.HtmlImport;
import com.vaadin.flow.component.html.Label;
import com.vaadin.flow.component.icon.VaadinIcon;
import com.vaadin.flow.component.orderedlayout.FlexComponent;
import com.vaadin.flow.component.orderedlayout.HorizontalLayout;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.router.Route;


@Route("")
@HtmlImport("frontend://styles/shared-styles.html")
public class StartView extends VerticalLayout
{

	public StartView()
	{
		super();
		this.initUI();
		this.reload();

		// Application-specific root instance
		
	}

	private void reload()
	{
		if(SpieltagDAO.findCurrent(LocalDate.now()) != null)
		{
			System.out.println(SpieltagDAO.findCurrent(LocalDate.now()).toString());
			this.buttonSpieltagStarten.setVisible(false);
			this.buttonSpieltagFortführen.setVisible(true);
			this.buttonSpieltagNeustarten.setVisible(true);

		}
		else
		{
			this.buttonSpieltagFortführen.setVisible(false);
			this.buttonSpieltagNeustarten.setVisible(false);
			this.buttonSpieltagStarten.setVisible(true);
		}

	}
	
	/**
	 * Event handler delegate method for the {@link Button} {@link #button2}.
	 *
	 * @see ComponentEventListener#onComponentEvent(ComponentEvent)
	 * @eventHandlerDelegate Do NOT delete, used by UI designer!
	 */
	private void button2_onClick(final ClickEvent<Button> event)
	{
		UI.getCurrent().navigate(SpielerVerwaltenView.class);
	}

	/**
	 * Event handler delegate method for the {@link Button} {@link #button3}.
	 *
	 * @see ComponentEventListener#onComponentEvent(ComponentEvent)
	 * @eventHandlerDelegate Do NOT delete, used by UI designer!
	 */
	private void button3_onClick(final ClickEvent<Button> event)
	{
		UI.getCurrent().navigate(StrafenVerwaltenView.class);
	}

	/**
	 * Event handler delegate method for the {@link Button} {@link #buttonSpieltagNeustarten}.
	 *
	 * @see ComponentEventListener#onComponentEvent(ComponentEvent)
	 * @eventHandlerDelegate Do NOT delete, used by UI designer!
	 */
	private void buttonSpieltagNeustarten_onClick(final ClickEvent<Button> event)
	{
		SpieltagDAO.delete(new Spieltag(LocalDate.now()));
		this.reload();
	}
	
	/**
	 * Event handler delegate method for the {@link Button} {@link #buttonSpieltagStarten}.
	 *
	 * @see ComponentEventListener#onComponentEvent(ComponentEvent)
	 * @eventHandlerDelegate Do NOT delete, used by UI designer!
	 */
	private void buttonSpieltagStarten_onClick(final ClickEvent<Button> event)
	{
		UI.getCurrent().navigate(SpielerAuswahl.class);
	}
	
	/**
	 * Event handler delegate method for the {@link Button} {@link #buttonSpieltagFortführen}.
	 *
	 * @see ComponentEventListener#onComponentEvent(ComponentEvent)
	 * @eventHandlerDelegate Do NOT delete, used by UI designer!
	 */
	private void buttonSpieltagFortführen_onClick(final ClickEvent<Button> event)
	{
		UI.getCurrent().navigate(SpieltagView.class);
	}
	
	/* WARNING: Do NOT edit!<br>The content of this method is always regenerated by the UI designer. */
	// <generated-code name="initUI">
	private void initUI()
	{
		this.lblContent               = new Label();
		this.lblContent2              = new Label();
		this.horizontalLayout         = new HorizontalLayout();
		this.buttonSpieltagStarten    = new Button();
		this.buttonSpieltagFortführen = new Button();
		this.buttonSpieltagNeustarten = new Button();
		this.button2                  = new Button();
		this.button3                  = new Button();
		this.button4                  = new Button();
		
		this.lblContent.setText("Feuchte Pudel");
		this.lblContent.getStyle().set("font-size", "2em");
		this.lblContent2.setText("DIE KEGEL APP");
		this.lblContent2.getStyle().set("font-size", "2em");
		this.buttonSpieltagStarten.setText("Spieltag Starten");
		this.buttonSpieltagStarten.setIcon(AvIcons.PLAY_ARROW.create());
		this.buttonSpieltagFortführen.setText("Spieltag Fortführen");
		this.buttonSpieltagFortführen.setVisible(false);
		this.buttonSpieltagFortführen.setIcon(VaadinIcon.PLAY_CIRCLE.create());
		this.buttonSpieltagNeustarten.setText("Spieltag Neustarten");
		this.buttonSpieltagNeustarten.setVisible(false);
		this.buttonSpieltagNeustarten.setIcon(AvIcons.STOP.create());
		this.button2.setText("Spieler Verwalten");
		this.button2.setIcon(SocialIcons.PERSON.create());
		this.button3.setText("Strafen Verwalten");
		this.button3.setIcon(VaadinIcon.DOLLAR.create());
		this.button4.setText("Statistiken");
		this.button4.setIcon(EditorIcons.FORMAT_ALIGN_LEFT.create());
		
		this.buttonSpieltagStarten.setSizeUndefined();
		this.buttonSpieltagFortführen.setSizeUndefined();
		this.buttonSpieltagNeustarten.setSizeUndefined();
		this.horizontalLayout.add(this.buttonSpieltagStarten, this.buttonSpieltagFortführen,
			this.buttonSpieltagNeustarten);
		this.horizontalLayout.setVerticalComponentAlignment(FlexComponent.Alignment.CENTER, this.buttonSpieltagStarten);
		this.horizontalLayout.setVerticalComponentAlignment(FlexComponent.Alignment.CENTER,
			this.buttonSpieltagFortführen);
		this.horizontalLayout.setVerticalComponentAlignment(FlexComponent.Alignment.CENTER,
			this.buttonSpieltagNeustarten);
		this.lblContent.setSizeUndefined();
		this.lblContent2.setSizeUndefined();
		this.horizontalLayout.setSizeUndefined();
		this.button2.setSizeUndefined();
		this.button3.setSizeUndefined();
		this.button4.setSizeUndefined();
		this.add(this.lblContent, this.lblContent2, this.horizontalLayout, this.button2, this.button3, this.button4);
		this.setHorizontalComponentAlignment(FlexComponent.Alignment.CENTER, this.lblContent);
		this.setHorizontalComponentAlignment(FlexComponent.Alignment.CENTER, this.lblContent2);
		this.setHorizontalComponentAlignment(FlexComponent.Alignment.CENTER, this.horizontalLayout);
		this.setHorizontalComponentAlignment(FlexComponent.Alignment.CENTER, this.button2);
		this.setHorizontalComponentAlignment(FlexComponent.Alignment.CENTER, this.button3);
		this.setHorizontalComponentAlignment(FlexComponent.Alignment.CENTER, this.button4);
		this.setSizeUndefined();
		
		this.buttonSpieltagStarten.addClickListener(this::buttonSpieltagStarten_onClick);
		this.buttonSpieltagFortführen.addClickListener(this::buttonSpieltagFortführen_onClick);
		this.buttonSpieltagNeustarten.addClickListener(this::buttonSpieltagNeustarten_onClick);
		this.button2.addClickListener(this::button2_onClick);
		this.button3.addClickListener(this::button3_onClick);
	} // </generated-code>

	// <generated-code name="variables">
	private Button           buttonSpieltagStarten, buttonSpieltagFortführen, buttonSpieltagNeustarten, button2,
		button3, button4;
	private HorizontalLayout horizontalLayout;
	private Label            lblContent, lblContent2;
	// </generated-code>

}
