
package com.company.kegelapp.ui;

import java.util.Collection;

import com.company.kegelapp.dal.StrafeDAO;
import com.company.kegelapp.domain.Strafe;
import com.rapidclipse.framework.server.resources.CaptionUtils;
import com.vaadin.flow.component.ClickEvent;
import com.vaadin.flow.component.ComponentEvent;
import com.vaadin.flow.component.ComponentEventListener;
import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.button.ButtonVariant;
import com.vaadin.flow.component.checkbox.Checkbox;
import com.vaadin.flow.component.dependency.HtmlImport;
import com.vaadin.flow.component.formlayout.FormLayout;
import com.vaadin.flow.component.formlayout.FormLayout.FormItem;
import com.vaadin.flow.component.grid.Grid;
import com.vaadin.flow.component.html.Label;
import com.vaadin.flow.component.orderedlayout.FlexComponent;
import com.vaadin.flow.component.orderedlayout.HorizontalLayout;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.component.textfield.NumberField;
import com.vaadin.flow.component.textfield.TextField;
import com.vaadin.flow.data.binder.Binder;
import com.vaadin.flow.router.Route;


@Route(value = "strafenverwaltenview")
@HtmlImport("frontend://styles/shared-styles.html")
public class StrafenVerwaltenView extends VerticalLayout
{
	public StrafenVerwaltenView()
	{
		super();
		this.initUI();
		this.updateList();
		this.saveButton.addThemeVariants(ButtonVariant.LUMO_PRIMARY);
		this.setStrafe(null);
	}
	
	private void updateList()
	{
		System.out.println("UPDATE LIST");
		final Collection<Strafe> strafen = StrafeDAO.findAll();
		for(final Strafe strafe : strafen)
		{
			System.out.println(strafe);
		}
		this.grid.setItems(StrafeDAO.findAll());
	}
	
	private void setStrafe(final Strafe strafe)
	{
		this.binder.setBean(strafe);
		if(strafe == null)
		{
			this.form.setVisible(false);
		}
		else
		{
			this.form.setVisible(true);
			this.txtName.focus();
		}
	}
	
	/**
	 * Event handler delegate method for the {@link Button} {@link #saveButton}.
	 *
	 * @see ComponentEventListener#onComponentEvent(ComponentEvent)
	 * @eventHandlerDelegate Do NOT delete, used by UI designer!
	 */
	private void saveButton_onClick(final ClickEvent<Button> event)
	{
		final Strafe strafe = this.binder.getBean();
		
		System.out.println(strafe);
		
		if(this.binder.writeBeanIfValid(strafe))
		
		{
			
			StrafeDAO.insert(strafe);
			
			this.updateList();
			
			this.setStrafe(null);
			
		}
		
		else
		
		{
			
			System.out.println("NICHT OK");
			
		}
	}
	
	/**
	 * Event handler delegate method for the {@link Button} {@link #button}.
	 *
	 * @see ComponentEventListener#onComponentEvent(ComponentEvent)
	 * @eventHandlerDelegate Do NOT delete, used by UI designer!
	 */
	private void button_onClick(final ClickEvent<Button> event)
	{
		this.grid.asSingleSelect().clear();
		final Strafe strafeToSave = new Strafe();
		this.setStrafe(strafeToSave);
	}
	
	/* WARNING: Do NOT edit!<br>The content of this method is always regenerated by the UI designer. */
	// <generated-code name="initUI">
	private void initUI()
	{
		this.lblContent2      = new Label();
		this.grid             = new Grid<>(Strafe.class, false);
		this.form             = new FormLayout();
		this.formItem         = new FormItem();
		this.lblActive        = new Label();
		this.chkActive        = new Checkbox();
		this.formItem2        = new FormItem();
		this.lblBetrag        = new Label();
		this.nrBetrag         = new NumberField();
		this.formItem3        = new FormItem();
		this.lblName          = new Label();
		this.txtName          = new TextField();
		this.horizontalLayout = new HorizontalLayout();
		this.saveButton       = new Button();
		this.deleteButton     = new Button();
		this.binder           = new Binder<>();
		this.button           = new Button();

		this.setClassName("my-view my-view3");
		this.lblContent2.setText("Strafen Verwalten");
		this.lblContent2.getStyle().set("font-size", "2em");
		this.grid.addColumn(Strafe::getName).setKey("name").setHeader(CaptionUtils.resolveCaption(Strafe.class, "name"))
			.setSortable(true);
		this.grid.addColumn(Strafe::getBetrag).setKey("betrag")
			.setHeader(CaptionUtils.resolveCaption(Strafe.class, "betrag")).setSortable(true);
		this.grid.addColumn(Strafe::getActive).setKey("active")
			.setHeader(CaptionUtils.resolveCaption(Strafe.class, "active")).setSortable(true);
		this.grid.setSelectionMode(Grid.SelectionMode.SINGLE);
		this.form.setResponsiveSteps(
			new FormLayout.ResponsiveStep("0px", 1, FormLayout.ResponsiveStep.LabelsPosition.TOP),
			new FormLayout.ResponsiveStep("500px", 2, FormLayout.ResponsiveStep.LabelsPosition.TOP),
			new FormLayout.ResponsiveStep("1000px", 3, FormLayout.ResponsiveStep.LabelsPosition.ASIDE));
		this.lblActive.setText("active");
		this.chkActive.setTabIndex(1);
		this.chkActive.setLabel("Checkbox");
		this.lblBetrag.setText("betrag");
		this.nrBetrag.setTabIndex(2);
		this.lblName.setText("name");
		this.txtName.setTabIndex(3);
		this.saveButton.setText("SAVE");
		this.deleteButton.setText("DELETE");
		this.button.setText("Strafe Hinzuf√ºgen");

		this.binder.forField(this.chkActive).asRequired().withNullRepresentation(false).bind(Strafe::getActive,
			Strafe::setActive);
		this.binder.forField(this.nrBetrag).asRequired().bind(Strafe::getBetrag, Strafe::setBetrag);
		this.binder.forField(this.txtName).asRequired().withNullRepresentation("").bind(Strafe::getName,
			Strafe::setName);

		this.lblActive.setSizeUndefined();
		this.lblActive.getElement().setAttribute("slot", "label");
		this.chkActive.setWidthFull();
		this.chkActive.setHeight(null);
		this.formItem.add(this.lblActive, this.chkActive);
		this.lblBetrag.setSizeUndefined();
		this.lblBetrag.getElement().setAttribute("slot", "label");
		this.nrBetrag.setWidthFull();
		this.nrBetrag.setHeight(null);
		this.formItem2.add(this.lblBetrag, this.nrBetrag);
		this.lblName.setSizeUndefined();
		this.lblName.getElement().setAttribute("slot", "label");
		this.txtName.setWidthFull();
		this.txtName.setHeight(null);
		this.formItem3.add(this.lblName, this.txtName);
		this.saveButton.setSizeUndefined();
		this.deleteButton.setSizeUndefined();
		this.horizontalLayout.add(this.saveButton, this.deleteButton);
		this.horizontalLayout.setWidth("100px");
		this.horizontalLayout.setHeight("100px");
		this.form.add(this.formItem, this.formItem2, this.formItem3, this.horizontalLayout);
		this.lblContent2.setSizeUndefined();
		this.grid.setWidthFull();
		this.grid.setHeight(null);
		this.form.setSizeUndefined();
		this.button.setSizeUndefined();
		this.add(this.lblContent2, this.grid, this.form, this.button);
		this.setHorizontalComponentAlignment(FlexComponent.Alignment.CENTER, this.lblContent2);
		this.setHorizontalComponentAlignment(FlexComponent.Alignment.CENTER, this.button);
		this.setSizeFull();

		this.saveButton.addClickListener(this::saveButton_onClick);
		this.button.addClickListener(this::button_onClick);
	} // </generated-code>
	
	// <generated-code name="variables">
	private FormLayout       form;
	private Checkbox         chkActive;
	private Grid<Strafe>     grid;
	private Button           button, saveButton, deleteButton;
	private NumberField      nrBetrag;
	private HorizontalLayout horizontalLayout;
	private Label            lblContent2, lblActive, lblBetrag, lblName;
	private Binder<Strafe>   binder;
	private TextField        txtName;
	private FormItem         formItem, formItem2, formItem3;
	// </generated-code>

}
